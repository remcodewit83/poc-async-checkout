import Head from "next/head";
import Checkout from "../components/checkout/Checkout";
import Header from "../components/common/Header";
import { CartWrapper } from "../context/cart";
import { useState, useEffect, useReducer } from "react";
import { HubConnectionBuilder } from "@microsoft/signalr";

function cartReducer(state, action) {
  switch (action.type) {
    case "setCart":
      return {
        loadingCart: false,
        loadingOrderReference: false,
        cart: action.payload,
      };
    case "cartLoading":
      return { ...state, loadingCart: true };
    case "orderReferenceLoading":
      return { ...state, loadingOrderReference: true };
    case "setRetailerOrderReference":
      state.cart.retailerOrderReference = action.payload;
      return {
        cart: state.cart,
        loading: false,
        loadingOrderReference: false,
      };
    default:
      return state;
  }
}

export default function CheckoutPage({ serverCart }) {
  const [connection, setConnection] = useState(null);
  const [{ cart, loadingCart, loadingOrderReference }, dispatch] = useReducer(
    cartReducer,
    {
      cart: serverCart,
      loadingCart: false,
      loadingOrderReference: false,
    }
  );

  async function fetchCart(id) {
    await fetch(`http://localhost:5000/api/cart/${id}`)
      .then((res) => res.json())
      .then((json) => {
        dispatch({ type: "setCart", payload: json });
      });
  }

  useEffect(() => {
    const newConnection = new HubConnectionBuilder()
      .withUrl("http://localhost:5000/status")
      .withAutomaticReconnect()
      .build();

    setConnection(newConnection);
  }, []);

  useEffect(() => {
    if (connection) {
      connection
        .start()
        .then((result) => {
          connection.invoke("JoinGroup", cart.id);
          connection.on("StateChanged", (message, parameter) => {
            switch (message) {
              case "PriceCalculated":
              case "ShippingEddCalculated":
                fetchCart(cart.id);
                break;
              case "Confirmed":
                dispatch({
                  type: "setRetailerOrderReference",
                  payload: parameter,
                });
                break;
            }
          });
        })
        .catch((e) => console.log("Connection failed: ", e));
    }
  }, [connection]);

  return (
    <div>
      <Head>
        <title>Async checkout</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <CartWrapper
        data={{ cart, loadingCart, loadingOrderReference, dispatch }}
      >
        <Checkout />
      </CartWrapper>
    </div>
  );
}

export async function getServerSideProps(context) {
  const cartId = context.query.cartId;

  const request = await fetch(`http://localhost:5000/api/cart/${cartId}`).then(
    (res) => res.json()
  );
  return {
    props: {
      serverCart: request,
    },
  };
}
